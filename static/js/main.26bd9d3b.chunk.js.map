{"version":3,"sources":["assets/coronavirus.png","services/api.js","features/covid/covidSlice.js","features/covid/CovidList.js","services/apiLogin.js","features/header/headerSlice.js","features/header/Header.js","App.js","app/store.js","serviceWorker.js","index.js"],"names":["module","exports","api","axios","create","baseURL","covidSlice","createSlice","name","initialState","casos","estados","reducers","set_casos","state","action","payload","set_estados","casos_map","covid","estados_map","covidActions","actions","find_casos","dispatch","a","get","res","data","CovidList","useSelector","useState","uf","setUf","useDispatch","useEffect","compare","b","estadoA","estadoB","comparison","sort","className","defaultValue","onChange","ev","target","value","hidden","map","estado","index","key","onClick","search_casos","scope","caso","cases","deaths","suspects","datetime","apiLogin","headerSlice","token","set_login","set_register","user_map","user","headerActions","Header","email","setEmail","password","setPassword","localStorage","getItem","logado","toggleForm","setToggleForm","setItem","src","logo","alt","clear","window","location","reload","type","emailUser","passwordUser","post","then","response","console","log","setTimeout","catch","error","alert","App","setLogado","configureStore","reducer","covidReducer","headerReducer","Boolean","hostname","match","ReactDOM","render","StrictMode","store","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.26bd9d3b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/coronavirus.21fabd9c.png\";","import axios from 'axios';\r\n\r\nconst api = axios.create({\r\n  baseURL: 'https://covid19-brazil-api.now.sh/api/report/v1/',\r\n});\r\n\r\nexport default api;","import { createSlice } from '@reduxjs/toolkit';\r\nimport api from '../../services/api';\r\n\r\nexport const covidSlice = createSlice({\r\n  name: 'covid',\r\n  initialState: { casos: [], estados: [] },\r\n  reducers: {\r\n    set_casos: (state, action) => {\r\n      state.casos = action.payload;\r\n      return state;\r\n    },\r\n    set_estados: (state, action) => {\r\n      state.estados = action.payload;\r\n      return state;\r\n    }\r\n  }\r\n});\r\n\r\nexport const casos_map = (state) => state.covid.casos;\r\nexport const estados_map = (state) => state.covid.estados;\r\nexport const covidActions = covidSlice.actions;\r\nexport const find_estados = () => async (dispatch) => {\r\n  const res = await api.get('');\r\n\r\n  var estados = res.data.data;\r\n\r\n  function compare(a, b) {\r\n    const estadoA = a.state;\r\n    const estadoB = b.state;\r\n  \r\n    let comparison = 0;\r\n    if (estadoA > estadoB) {\r\n      comparison = 1;\r\n    } else if (estadoA < estadoB) {\r\n      comparison = -1;\r\n    }\r\n    return comparison;\r\n  }\r\n  \r\n  estados.sort(compare);\r\n\r\n  dispatch(covidActions.set_estados(estados));\r\n}\r\nexport const find_casos = () => async (dispatch) => {\r\n  const res = await api.get('');\r\n\r\n  dispatch(covidActions.set_casos(res.data.data));\r\n}\r\nexport const search_casos = (uf) => async (dispatch) => {\r\n  if (uf !== \"todos\"){\r\n    const res = await api.get(`/brazil/uf/${uf}`);\r\n    \r\n    dispatch(covidActions.set_casos([res.data]));\r\n  } else {\r\n    dispatch(find_casos());\r\n  }\r\n}\r\nexport default covidSlice.reducer;","import React, { useState, useEffect } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { casos_map, find_casos, search_casos, estados_map, find_estados } from './covidSlice';\r\n\r\nimport './CovidList.css'\r\n\r\nfunction CovidList() {\r\n  const casos = useSelector(casos_map);\r\n  const estados = useSelector(estados_map);\r\n  const [uf, setUf] = useState('');\r\n  const dispatch = useDispatch();\r\n  \r\n  useEffect(() => {\r\n    dispatch(find_casos());\r\n    dispatch(find_estados());\r\n  }, [dispatch]);\r\n  \r\n  return (\r\n    <div className='lista'>\r\n\r\n      <select className=\"selectstate\" defaultValue={'DEFAULT'} onChange={(ev) => setUf(ev.target.value)}>\r\n        <option hidden value='DEFAULT'>Selecione um estado</option>\r\n        <option value='todos'>Todos os estados</option>\r\n        {\r\n          estados.map((estado, index) => {\r\n            return (\r\n              <option value={estado.uf} key={index}>{estado.state}</option>\r\n            );\r\n        })}\r\n      </select>\r\n      <button className='pesquisa' onClick={() => dispatch(search_casos(uf))}>Search</button>\r\n\r\n        <table className=\"tabela\">\r\n        <caption className=\"legendatabela\">Covid no Brasil</caption>\r\n            <thead className=\"cabecalho\">\r\n            <tr>\r\n                <th className='cabecalho' scope=\"col\">Estado</th>\r\n                <th className='cabecalho' scope=\"col\">Casos</th>\r\n                <th className='cabecalho' scope=\"col\">Mortes</th>\r\n                <th className='cabecalho' scope=\"col\">Suspeitas</th>\r\n                <th className='cabecalho' scope=\"col\">Última atualização</th>\r\n            </tr>\r\n            </thead>\r\n            <tbody>\r\n            {casos.map((caso, index) => {\r\n              return (\r\n                <tr key={index}>\r\n                <td className='itens'>{caso.uf}</td>\r\n                <td className='itens'>{caso.cases}</td>\r\n                <td className='itens'>{caso.deaths}</td>\r\n                <td className='itens'>{caso.suspects}</td>\r\n                <td className='itens'>{caso.datetime}</td>\r\n                </tr>            \r\n              );\r\n            })}\r\n            </tbody>\r\n        </table>\r\n\r\n      {/* <ul>\r\n        <li className='cabecalho'>Estado - Casos</li>\r\n        \r\n      </ul> */}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CovidList;\r\n","import axios from 'axios';\r\n\r\nconst apiLogin = axios.create({\r\n  baseURL: 'https://reqres.in/api/',\r\n});\r\n\r\nexport default apiLogin;","import { createSlice } from '@reduxjs/toolkit';\r\nimport apiLogin from '../../services/apiLogin';\r\n\r\nexport const headerSlice = createSlice({\r\n    name: 'user',\r\n    initialState: { token: ''},\r\n    reducers: {\r\n      set_login: (state, action) => {\r\n        state.token = action.payload;\r\n        return state;\r\n      },\r\n      set_register: (state, action) => {\r\n        state.token = action.payload;\r\n        return state;\r\n      }\r\n    }\r\n});\r\n\r\nexport const user_map = (state) => state.user.token;\r\nexport const headerActions = headerSlice.actions;\r\n\r\nexport const login = (emailUser, passwordUser) => async (dispatch) => {\r\n    await apiLogin.post('login', {\r\n      email: emailUser,\r\n      password: passwordUser\r\n    }).then(function (response) {\r\n      localStorage.setItem('logged', true);\r\n      console.log(response.data);\r\n      dispatch(headerActions.set_login(response.data));\r\n      setTimeout(function() {\r\n        window.location.reload(false);\r\n    }, 400);\r\n    }).catch( error => {\r\n      alert('Erro ao efetuar login\\n', error);\r\n    });\r\n}\r\n\r\nexport const register = (emailUser, passwordUser) => async (dispatch) => {\r\n  await apiLogin.post('users', {\r\n    email: emailUser,\r\n    password: passwordUser\r\n  }).then((response) => {\r\n    console.log(response.data);\r\n    alert('Usuário criado com sucesso!');\r\n    dispatch(headerActions.set_register(response.data));\r\n  }).catch( error => {\r\n    alert('Erro ao criar novo usuário\\n', error);\r\n  });\r\n}\r\n\r\nexport default headerSlice.reducer;","import React, { useState, useEffect } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { user_map, login, register } from './headerSlice';\r\n\r\nimport logo from '../../assets/coronavirus.png'\r\nimport './Header.css';\r\n\r\nfunction Header() {\r\n    const user = useSelector(user_map);\r\n    const [email, setEmail] = useState('');\r\n    const [password, setPassword] = useState('');\r\n    const [logado] = useState(localStorage.getItem('logged'))\r\n    const dispatch = useDispatch();\r\n\r\n    const [toggleForm, setToggleForm] = useState(false);\r\n\r\n\r\n    function handleToggleForm() {\r\n        toggleForm ? setToggleForm(false) : setToggleForm(true);\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (!localStorage.getItem('token')){\r\n            localStorage.setItem('token', 'undefined')\r\n        }\r\n        if (localStorage.getItem('token') === 'undefined'){\r\n            localStorage.setItem('token', `${user.token}`)\r\n        } \r\n    }, [logado, user.token]);\r\n\r\n    return (\r\n        <div className='container'>\r\n            <div className='image'>\r\n                <img src={logo} alt=\"covid logo\"/>\r\n            </div>\r\n            {\r\n                logado ? (\r\n                    <button className=\"botao\" onClick={() => {\r\n                        localStorage.clear();\r\n                        window.location.reload(false);\r\n                    }}>Sair</button>\r\n                )\r\n                :\r\n                (<div className='inputs'>\r\n                    <label>Email: </label>\r\n                    <input className='campoEmail' type='email' onChange={(ev) => setEmail(ev.target.value)}></input>\r\n                        \r\n                    <label>Senha: </label>\r\n                    <input className='campoSenha' type='password' onChange={(ev) => setPassword(ev.target.value)}></input>\r\n                        \r\n                    <div>\r\n                        <button className=\"botao\" onClick={() => {\r\n                            dispatch(login(email, password));\r\n                        }}>LOGIN</button>\r\n                        \r\n                    </div>\r\n                    <div> \r\n                        <button className=\"botao\" onClick={() => handleToggleForm()}>REGISTRAR-SE</button>\r\n                    </div>\r\n                </div>)\r\n            }\r\n            \r\n            {toggleForm ? (\r\n                <div>\r\n                    <h2>Preencha os dados abaixo</h2>\r\n                    <label>Email: </label>\r\n                    <input className='campoEmail' type='email' onChange={(ev) => setEmail(ev.target.value)}></input>\r\n                            \r\n                    <label>Senha: </label>\r\n                    <input className='campoSenha' type='password' onChange={(ev) => setPassword(ev.target.value)}></input>\r\n\r\n                    <button className=\"botao\" onClick={() => dispatch(register(email, password))}>Cadastrar</button>\r\n                </div>\r\n            ) : null}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Header;\r\n","import React ,{ useState, useEffect } from 'react';\r\nimport CovidList from './features/covid/CovidList'\r\nimport Header from './features/header/Header'\r\n\r\nfunction App() {\r\n  const [logado, setLogado] = useState(false)\r\n\r\n  useEffect(() => {\r\n    if (localStorage.getItem('token') !== 'undefined'){\r\n      setLogado(true);\r\n    } else {\r\n      setLogado(false);\r\n    }\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <Header />\r\n      {logado ?  <CovidList /> : null}\r\n     \r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { configureStore } from '@reduxjs/toolkit';\r\nimport covidReducer from '../features/covid/covidSlice';\r\nimport headerReducer from '../features/header/headerSlice'\r\n\r\nexport default configureStore({\r\n  reducer: {\r\n    'covid': covidReducer,\r\n    'user': headerReducer\r\n  },\r\n});\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport store from './app/store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}